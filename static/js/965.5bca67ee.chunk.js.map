{"version":3,"file":"static/js/965.5bca67ee.chunk.js","mappings":"qLAGaA,E,MAAWC,GAAAA,OAAa,CACnCC,QCJsB,+BDKtBC,OAAQ,CACNC,QCLmB,qC,8GCGjBC,EAAOC,EAAAA,GAAAA,GAAH,qHAMJC,EAAOD,EAAAA,GAAAA,GAAH,8CA8BV,EA1BmB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,UACGG,EAAOG,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,YACjB,OACE,SAACN,EAAD,WACE,SAAC,KAAD,CAAMO,GAAE,iBAAYF,GAAMG,MAAO,CAAEC,KAAMP,GAAzC,UACE,gBACEQ,IACEJ,EACI,kCAAoCA,EACpC,6EAENK,IAAI,QARCN,EAcd,KAGN,C,2JCnCKO,EAAe,mCAAG,WAAMC,GAAN,kGAEGpB,EAAAA,EAAAA,IAAa,gBAAiB,CAAEG,OAAQiB,IAF3C,uBAEZC,EAFY,EAEZA,KAFY,kBAGbA,GAHa,gCAKpBC,EAAAA,GAAAA,MAAA,0CALoB,yDAAH,sDASrB,I,6BCTaC,GAAgBjB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAH,gSAYbmB,GAAkBnB,EAAAA,EAAAA,IAAOoB,EAAAA,GAAPpB,CAAH,0OCZfqB,EAAgBrB,EAAAA,GAAAA,OAAH,qR,mBCM1B,EAPqB,WACnB,OACE,SAACqB,EAAD,CAAeC,KAAK,SAApB,UACE,SAAC,MAAD,KAGL,ECiBD,EArBmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC9B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEX,MAAK,OAAEU,QAAF,IAAEA,EAAAA,EAAS,IACjCD,SAAU,SAACG,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBJ,EAASG,GACTC,GACD,EALH,UAOE,UAACV,EAAD,YACE,SAACE,EAAD,CACEG,KAAK,OACLM,KAAK,QACLC,YAAY,qBAEd,SAAC,EAAD,QAIP,E,UCkBD,EAlCe,WACb,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAGAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVR,EAAI,UAAGM,EAAaG,IAAI,eAApB,QAA+B,GAC1B,KAATT,GAGJf,EAAgB,CAAEC,MAAOc,IAAOU,MAAK,SAAAvB,GACnCiB,EAAgBjB,EAAKwB,QACtB,GACF,GAAE,CAACL,IAWJ,OACE,iCAEE,SAAC,EAAD,CAAYX,SAZI,SAAAC,GAClB,GAA2B,KAAvBA,EAAMV,MAAM0B,OAAhB,CAIA,IAAM3C,EAAyB,KAAhB2B,EAAMV,MAAe,CAAEc,KAAMJ,EAAMV,OAAU,CAAC,EAC7DqB,EAAgBtC,EAFf,MAFCmB,EAAAA,EAAAA,IAAM,uBAAwB,CAAC,EAKlC,EAKsCQ,MAAOU,EAAaG,IAAI,WAE3D,SAACI,EAAA,EAAD,CAAYvC,OAAQ6B,MAGzB,C","sources":["api/api.js","constants/ApiConst.js","components/MoviesList/MoviesList.jsx","api/getSearchMovies.js","components/SearchForm/SearchForm.styled.js","components/SearchButton/SearchButton.styled.js","components/SearchButton/SearchButton.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL, API_KEY } from '../constants/ApiConst';\n\nexport const axiosApi = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n  ","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '31bcd1832c773daa08adbf34921e0577';","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  list-style: none;\n`;\nconst Item = styled.li`\nmargin-bottom: 10px;\n`;\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ id, poster_path }) => {\n        return (\n          <Item key={id}>\n            <Link to={`/movie/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w300` + poster_path\n                    : 'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg'\n                }\n                alt=\"\"\n              />\n            </Link>\n            {/* <p>{movie.title}</p> */}\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { axiosApi } from './api';\nimport { toast } from 'react-toastify';\n\nconst getSearchMovies = async query => {\n  try {\n    const { data } = await axiosApi.get('/search/movie', { params: query });\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  }\n};\n\nexport default getSearchMovies;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const SearchingForm = styled(Form)`\n  max-width: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  border-radius: 15px;\n  overflow: hidden;\n  background-color: #dde1e7;\n  box-shadow: inset 2px 2px 5px #babecc, inset -5px -5px 10px #ffffff73;\n`;\n\nexport const SearchFormInput = styled(Field)`\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  padding: 10px 20px;\n  outline: none;\n  border: none;\n  color: #000;\n  background-color: transparent;\n  ::placeholder {\n    color: grey;\n  }\n`;\n","import styled from 'styled-components';\n\n\nexport const SearchFormBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px 10px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: black;\n  transition: color 250ms ease-in-out;\n  :hover {\n    color: blue;\n  }\n`;\n\n// export const SearchFormBtnIcon = styled(RiSearchLine)`\n//   width: 25px;\n//   height: 25px;\n// `;\n","import { SearchFormBtn } from './SearchButton.styled';\nimport { BsSearch } from 'react-icons/bs';\nconst SearchButton = () => {\n  return (\n    <SearchFormBtn type=\"submit\">\n      <BsSearch />\n    </SearchFormBtn>\n  );\n};\nexport default SearchButton;\n","import { Formik } from 'formik';\nimport { SearchingForm, SearchFormInput } from './SearchForm.styled';\nimport SearchButton from 'components/SearchButton';\n\nconst SearchForm = ({ onSubmit, value }) => {\n  return (\n    <Formik\n      initialValues={{ query: value ?? '' }}\n      onSubmit={(values, { resetForm }) => {\n        onSubmit(values);\n        resetForm();\n      }}\n    >\n      <SearchingForm>\n        <SearchFormInput\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Enter a keyword\"\n        />\n        <SearchButton />\n      </SearchingForm>\n    </Formik>\n  );\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport getSearchMovies from '../../api/getSearchMovies';\nimport { toast } from 'react-toastify';\nimport SearchForm from 'components/SearchForm';\nimport MoviesList from 'components/MoviesList';\n\nconst Movies = () => {\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n \n\n  useEffect(() => {\n    let name = searchParams.get('name') ?? '';\n    if (name === '') {\n      return;\n    }\n    getSearchMovies({ query: name}).then(data => {\n      setSearchResult(data.results);\n    });\n  }, [searchParams]);\n\n  const handlSubmit = value => {\n    if (value.query.trim() === '') {\n      toast('Please, enter a word', {});\n      return;\n    }\n    const params = value.query !== '' ? { name: value.query } : {};\n    setSearchParams(params);\n  };\n\n  return (\n    <>\n  \n      <SearchForm onSubmit={handlSubmit} value={searchParams.get('name')} />\n\n      <MoviesList movies={searchResult} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axiosApi","axios","baseURL","params","api_key","List","styled","Item","movies","location","useLocation","map","id","poster_path","to","state","from","src","alt","getSearchMovies","query","data","toast","SearchingForm","Form","SearchFormInput","Field","SearchFormBtn","type","onSubmit","value","initialValues","values","resetForm","name","placeholder","useState","searchResult","setSearchResult","useSearchParams","searchParams","setSearchParams","useEffect","get","then","results","trim","MoviesList"],"sourceRoot":""}